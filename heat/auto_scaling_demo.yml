heat_template_version: 2015-08-11

description: >
  This is a simple template that illustrates automatic scaling up and down
  using OS::Heat::AutoScalingGroup. CPU load is generated for
  15 mins after each instance is spawned, triggering a scale-up event.
  Once the max number of instances has been reached and the CPU
  load generation has finished, the number of instances will be scaled
  back down to 1.
parameters:
  key_name:
    type: string
    description: Keypair for authentication
  flavor:
    type: string
    description: Flavor of the servers
  image:
    type: string
    description: Image used to boot the servers
  availability_zone:
    type: string
    description: Name of the availability zone for server placement.
  private_net_id:
    type: string
    label: Private network ID
    description: ID of the private network to use

resources:
 
  cloud_config_stress:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        packages:
          - stress
        runcmd:
          - stress --cpu 1 --timeout 15m

  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      max_size: 10
      resource:
        type: OS::Nova::Server
        properties:
          key_name: {get_param: key_name}
          flavor: {get_param: flavor}
          image: {get_param: image}
          availability_zone: {get_param: availability_zone}
          networks:
            - network: {get_param: private_net_id}
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          user_data_format: RAW
          user_data:
            get_resource: cloud_config_stress

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: 1
  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: 60
      scaling_adjustment: '-1'

  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 50
      alarm_actions:
        - {get_attr: [scale_up_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt
  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 15% for 10 minutes
      meter_name: cpu_util
      statistic: avg
      period: 600
      evaluation_periods: 1
      threshold: 15
      alarm_actions:
        - {get_attr: [scale_down_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt

outputs:
  scale_up_url:
    description: >
      Webhook URL to scale up the group.
      You can invoke the scale-up operation by doing an HTTP POST to this URL.
    value: {get_attr: [scale_up_policy, alarm_url]}
  scale_dn_url:
    description: >
      Webhook URL to scale down the group.
      You can invoke the scale-down operation by doing an HTTP POST to this URL.
    value: {get_attr: [scale_down_policy, alarm_url]}
  server_list:
    description: >
      List of server names that are part of the group.
    value: {get_attr: [asg, outputs_list, name]}
